#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015,2025 Petter Reinholdtsen <pere@hungry.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2.0 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA
#
# Given a set of org IDs, extract ownership and output a dotty graph
# showing the ownership relations.
#
# Scrape info from proff.no, as brreg.no do not seem to provide
# ownership information.

import sys
import codecs
import json
import mechanize
import lxml.html

directonly = True

# output using UTF-8
#sys.stdout = codecs.getwriter('utf8')(sys.stdout)

# Collected data set, indexed on orgnr
data = {}

def log(msg):
    print(msg, file=sys.stderr)
    return

def lookup_org(orgid):
    log("Looking up org %s" % orgid)
    starturl = "https://www.proff.no/aksjon%%C3%%A6rer/-/-/%s" % orgid

    br = mechanize.Browser()
    br.open(starturl)
    response = br.response()
    orgurl = response.geturl()

#    print "locating subs in %s" % orgurl
    root = lxml.html.fromstring(response.read().decode("UTF-8"))
    offinfo = root.cssselect("section.official-info ul li.clear span a")
    subs = []
    if not directonly:
      for a in offinfo:
        if 'href' in a.attrib:
#            print a.attrib['href']
            suborgid = a.attrib['href'].split('/')[-2]
            subs.append(suborgid)
#    print subs

    # Syntesize correct URL for roles
    roleurl = orgurl.replace("/selskap/", "/roller/")
#    print(roleurl)
    br.open(roleurl)
    response = br.response()
    html = response.read().decode("UTF-8")
#    print(html)
    root = lxml.html.fromstring(html)
    
    orgname = root.cssselect("div.MuiGrid-container div.MuiGrid-direction-xs-row h1")[0].text

    #print("Owners of %s:" % orgname)
    owners = []

    info = root.cssselect("script#__NEXT_DATA__")[0].text
    d = json.loads(info)
    for owner in d["props"]["pageProps"]["owners"]["relations"]:
        ownerorgid = owner["id"]
        ownerinfo = {
            'name'       : owner["name"],
            'shares'     : owner["numberOfShares"],
            'sharesfrac' : owner["sharePercentage"],
        }
        if ownerorgid is not None:
            ownerinfo['orgid'] = ownerorgid
        owners.append(ownerinfo)

#    print owners
    data[orgid] = {
        'name' : orgname,
        'owners' : owners,
        'subs' : subs,
        }
    log(str(data[orgid]))
    return data[orgid]

def fetch_ownership_graph(orgid):
    queue = [orgid]
    recurse = {}
    recurse[orgid] = (True, True) # owners, subs
    while 0 < len(queue):
        curorgid = queue.pop(0)
        try:
            info = lookup_org(curorgid)
        except mechanize.HTTPError as e:
            log("Unable to look up %s: %s" % (curorgid, e))
            continue
        if recurse[orgid][1]:
            for suborgid in info['subs']:
                if suborgid not in data and suborgid not in queue:
                    queue.append(suborgid)
                    recurse[suborgid] = (True, True)
        if recurse[orgid][0]:
            for owner in info['owners']:
                if 'orgid' in owner:
                    ownerorgid = owner['orgid']
                    log("Considering %s" % ownerorgid)
                    if ownerorgid not in data and ownerorgid not in queue:
                        log("Adding %s to queue" % owner['orgid'])
                        queue.append(owner['orgid'])
                    recurse[ownerorgid] = (True, False)
        log("Q remaining:" + str(queue))

def dotty_orgid_output(labels, orgid):
#    log("Output %s" % orgid)
    str = ""
    if orgid in labels: # Already processed, skip it
        return str
    if orgid not in data:
        log("error: unable to find info on org %s" % orgid)
        return str
    labels[orgid] = data[orgid]['name']
    for owner in data[orgid]['owners']:
        if 'orgid' in owner:
            ownerstr = owner['orgid']
#            print "Checking", owner
            if 'orgid' in owner and owner['orgid'] not in labels:
#                print "printing ", owner['orgid']
                str = str + dotty_orgid_output(labels, owner['orgid'])
            labels[owner['orgid']] = owner['name']
        else:
            ownerstr = owner['name']
        str = str + "\"%s\" -> \"%s\" [label=\"%s\"]\n" % (ownerstr, orgid, owner['sharesfrac'])
    return str

def dotty_output(orgids):
    for orgid in orgids:
        log("Fetching %s" % orgid)
        fetch_ownership_graph(orgid)
    str = "digraph ownership {\n"
#    str = str + "concentrate=true;\n"
    str = str + "rankdir = LR;\n"
    labels = {}
    for orgid in data.keys():
        str = str + dotty_orgid_output(labels, orgid)
    for labelorgid in labels.keys():
        str = str + "\"%s\" [label=\"%s %s\"]\n" %(labelorgid, labels[labelorgid], labelorgid)
    str = str + "}\n"
    return str

if __name__ == '__main__':
    if 1 < len(sys.argv):
        res = dotty_output(sys.argv[1:])
        print(res)
    else:
        print("Usage: ", sys.argv[0], " <orgid> [<orgid>...]")
